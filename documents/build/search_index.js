var documenterSearchIndex = {"docs":
[{"location":"01-intro.html#Parameter-estimation-for-ordinary-differential-equations","page":"Parameter estimation for ordinary differential equations","title":"Parameter estimation for ordinary differential equations","text":"","category":"section"},{"location":"01-intro.html","page":"Parameter estimation for ordinary differential equations","title":"Parameter estimation for ordinary differential equations","text":"In these notes I will demonstrate some techniques for estimating parameters and initial  conditions for ordinary differential equations. The application will be the Droop-Grover  model of phytoplankton growth on one limiting nutrient with growth rate determined by internal nutrient reserves.","category":"page"},{"location":"01-intro.html","page":"Parameter estimation for ordinary differential equations","title":"Parameter estimation for ordinary differential equations","text":"Examples are broken into the following sections","category":"page"},{"location":"01-intro.html","page":"Parameter estimation for ordinary differential equations","title":"Parameter estimation for ordinary differential equations","text":"The differential equations and their numerical solution\nParameter estimation from simulated data\nObservational data from lab cultures\nSciML optimization to estimate parameters and initial conditions\nTuring-MCMCChains methods to estimate distributions of parameters and predicted trajectories","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html#Parameter-estimation-from-simulated-data","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"","category":"section"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html#Pre-requisites","page":"Parameter estimation from simulated data","title":"Pre-requisites","text":"","category":"section"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Julia packages used:","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"using DifferentialEquations, Plots\nusing DifferentialEquations, Flux, DiffEqFlux, Optim, DiffEqSensitivity\nimport Statistics\nusing Turing, Distributions, DifferentialEquations \nusing MCMCChains, Plots, StatsPlots\nusing Random\nusing Logging","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html#Simulating-data","page":"Parameter estimation from simulated data","title":"Simulating data","text":"","category":"section"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"We use the same equations as before. This time we specify some times to sample the solution to obtain data to use in parameter estimation.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"function droop!(du, u, p, t)\n  R, Q, X = u\n  Km, Vmax, Qmin, muMax, d, R0 = p\n  rho = Vmax * R / (Km + R)\n  mu = muMax * (1 - Qmin/Q)\n  du[1] = dRdt = d*(R0 - R) - rho*X\n  du[2] = dQdt = rho - mu*Q\n  du[3] = dXdt = (mu - d)*X\nend\nnothing # hide","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"The initial conditions, parameters, and time-span for the solution must be specified.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"u0 = [1.0, 1.0, 1.0]\np = [0.1, 2.0, 1.0, 0.8, 0.0, 0.0]\ntspan = (0.0, 10.0)\ntsteps = [0.1, 3.2, 4.5, 7.0, 9.1]\nnothing # hide","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Now we create and solve the ODE initial value problem. We will create two solutions, one smoothly estimating the solution with interpolation on an interval and one with  samples at a few discrete points.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"prob = ODEProblem(droop!, u0, tspan, p)\nsol1 = solve(prob, Tsit5())\nsol2 = solve(prob, Rosenbrock23(), saveat = tsteps)\nnothing # hide","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"We will plot the solution and the discrete samples.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Plots.plot(sol1)\nPlots.scatter!(sol2)","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"We can convert the solution to a matrix and add some noise to the output.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"data1 = Array(sol2) \ndata1 = data1 .* (1 .+ 0.05*randn(size(data1)));\nPlots.plot(sol1, label = ['R' 'Q' 'X'])\nPlots.scatter!(sol2.t, data1', label = ['R' 'Q' 'X'])","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html#Optimization-to-find-parameters","page":"Parameter estimation from simulated data","title":"Optimization to find parameters","text":"","category":"section"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"First we write a function to describe the difference between a trial solution and the data points.  For the optimizer we use next, this should be a function of just the  parameters to be adjusted. Here my loss function is the difference between solution and data, scaled by standard deviation of each variable in data, squared and summed.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"function loss(p)\n    tspan = (0.0, 10.0)\n    u0 = p[1:3]\n    param = [ p[4:7] ; 0.0 ; 0.0 ] # force d = Rin = 0.0\n    prob = ODEProblem(droop!, u0, tspan, param)\n    sol2 = solve(prob, Rosenbrock23(), saveat = tsteps)\n    data2 = Array(sol2)\n    # loss = sum(((1.0 ./ Statistics.std(data1, dims=2)') * (data2 .- data1) ) .^ 2 )\n    # loss = sum(((1.0 ./ (1 .+ Statistics.std(data1, dims=2)')) * (data2 .- data1) ) .^ 2 )\n    loss = sum( (data2 .- data1) .^ 2 )\n  return loss , sol2\nend","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"(Note: I originally standardized the three variables as in the commented loss definition above, but  this resulted in a worse solution, because R was so close to 0 and has a standard deviation of 10^{-7}. Perhaps a solution is to add a small amount to standard deviations to prevent this distortion. My first  attempt, also commented out, did led to instabilities.)","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"The optimizer allows us to provide a callback function to show the loss score, or make a plot, at each iteration.  Here's an example callback function.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"callback = function (p, l, pred)\n  display(l)\n  # plt = plot(pred, ylim = (0, 6))\n  # display(plt)\n  # Tell sciml_train to not halt the optimization. If return true, then\n  # optimization stops.\n  return false\nend","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"We can test the loss function.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"loss([1.0; 1.0; 1.0; p])","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"We are now ready to use the optimizer. ADAM is the gradient-search method.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"result_ode = DiffEqFlux.sciml_train(loss, [1.0, 1.0, 1.0, 0.1, 2.0, 1.0, 1.0, 0, 0],\n                                    ADAM(0.001),  # this argument needs to be small or instability\n                                    cb = callback,\n                                    maxiters = 200)","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Now we use the parameters from this optimization to solve the differential equation and plot the solution.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"prob = ODEProblem(droop!, result_ode.u[1:3], tspan, result_ode.u[4:end])\nsol3 = solve(prob, Rosenbrock23())\nnothing # hide","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"We will plot the solution and the discrete samples.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Plots.plot(sol1, label = [\"Original R\" 'Q' 'X'])\nPlots.plot!(sol3, lw = 2, label = [\"New R\" 'Q' 'X'])\nPlots.scatter!(sol2.t, data1', label = [\"Data R\" 'Q' 'X'])","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Compare parameters.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"xaxis = [\"R0\" \"Q0\" \"X0\" \"Km\" \"Vmax\" \"Qmin\" \"muMax\" \"d\" \"R0\"]\nestimate = result_ode.u'\noriginal = [u0; p]'\nerror = (estimate .- original ) ./ original\np1 = Plots.scatter(xaxis, estimate, legend = false, title = \"Parameters\")\np1 = Plots.scatter!(xaxis, original, legend = false)\np2 = Plots.scatter(xaxis[1:7], error[1:7], legend = false, title = \"Relative error\")\nplot(p1, p2, layout = (2,1))","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html#Bayesian-MCMC-parameter-estimation","page":"Parameter estimation from simulated data","title":"Bayesian MCMC parameter estimation","text":"","category":"section"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Set a random seed to make the result reproducible. Select an option for Turing package.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Random.seed!(14)\nTuring.setadbackend(:forwarddiff)\nnothing # hide","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Define a model for the parameters, including priors, solution of the ODE, and comparison between data and the solution.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"@model function fitDroop1(t, R, Q, X)\n    σ1 ~ InverseGamma(2, 3)  # positive support; parameters α, β; mean β/(α-1), here 3\n    σ2 ~ InverseGamma(2, 3) \n    R0 ~ truncated(Normal(1, 1), 0, 5)\n    Q0 ~ truncated(Normal(1, 1), 0, 5)\n    X0 ~ truncated(Normal(1, 1), 0, 5)\n    Km ~ truncated(Normal(4.0, 2), 0, 5)\n    Vmax ~ truncated(Normal(1.2, 2), 0, 5)\n    Qmin ~ truncated(Normal(1.0, 2), 0, 5)\n    muMax ~ truncated(Normal(1.0, 2), 0, 5)\n\n    p = [ Km, Vmax, Qmin, muMax, 0.0, 0.0]\n\n    # must define the problem with numeric values first, then update with distributions\n    prob1 = ODEProblem(droop!, [R[1], Q[1], X[1]], (0.0, 10.0), [0.1, 1.0, 1.0, 1.0, 0.0, 0.0])\n    prob = remake(prob1, u0=[R0, Q0, X0], p=p)  \n    predicted = solve(prob, Rosenbrock23(), saveat=t)\n    \n    for j = 1:length(t)\n        Q[j] ~ Normal(predicted[j][2], σ1)\n        X[j] ~ Normal(predicted[j][3], σ2)\n    end\nend\nnothing # hide","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Create the model and simulate the chains.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"t = sol2.t\nR = [v[1] for v in sol2.u]\nQ = [v[2] for v in sol2.u]\nX = [v[3] for v in sol2.u]\n\nmodel = fitDroop1(t, R, Q, X)\nchain2 = sample(model, NUTS(.65), MCMCThreads(), 200, 4, progress=false)  # multi-threaded\n# chain2 = mapreduce(c -> sample(model, NUTS(.75), 200), chainscat, 1:4) # single thread\nnothing # hide","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Extract data so we can plot trajectories from a selection of parameter values from the posterior distribution. Parameters come out of the chains in alphabetical order, so I resequence them to be in the order: initial conditons, parameter values as used in ODE function.","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"chain_array0 = Array(chain2);\nchain_array = chain_array0[: ,[4, 2, 6, 1, 5, 3, 7] ]  # R Q X Km Vmax Qmin muMax\nnothing # hide","category":"page"},{"location":".ipynb_checkpoints/03-simulations-checkpoint.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"N = size(chain_array)[1]\nN2 = Int(N/2)\npR = Plots.scatter(t, R);\nfor k in 1:300\n    pars = [ chain_array[rand(N2:N), :];  0.0; 0.0 ] # append d, Rin\n    resol = solve(remake(prob, u0 = pars[1:3], p = pars[4:end]), Rosenbrock23()) \n    pR = plot!(resol, vars=(0,1), alpha=0.3, color = \"#BBBBBB\", legend = false)\nend\npR = plot!(sol1, vars=(0,1), alpha=1, color = \"#BB0000\", legend = false, ylims=(0, Inf),\n        yguide = \"R\")\npQ = Plots.scatter(t, Q);\nfor k in 1:300\n    pars = [ chain_array[rand(N2:N), :];  0.0; 0.0 ] # append d, Rin\n    resol = solve(remake(prob, u0 = pars[1:3], p = pars[4:end]), Rosenbrock23()) \n    pQ = plot!(resol, vars=(0,2), alpha=0.3, color = \"#BBBBBB\", legend = false)\nend\npQ = plot!(sol1, vars=(0,2), alpha=1, color = \"#BB0000\", legend = false, ylims=(0, Inf),\n        yguide = \"Q\")\npX = Plots.scatter(t, log.(X));\nfor k in 1:300\n    pars = [ chain_array[rand(N2:N), :];  0.0; 0.0 ] # append d, Rin\n    resol = solve(remake(prob, u0 = pars[1:3], p = pars[4:end]), Rosenbrock23()) \n    pX = plot!(resol, vars=((t,x) -> (t, log.(x)), 0, 3), alpha=0.3, color = \"#BBBBBB\", legend = false)\nend\npX = plot!(sol1, vars=((t,x) -> (t, log.(x)), 0,3), alpha=1, color = \"#BB0000\", legend = false,\n        yguide = \"log X\")\nplot(pR, pQ, pX, layout = (3,1))","category":"page"},{"location":"03-simulations.html#Parameter-estimation-from-simulated-data","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"","category":"section"},{"location":"03-simulations.html#Pre-requisites","page":"Parameter estimation from simulated data","title":"Pre-requisites","text":"","category":"section"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Julia packages used:","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"using DifferentialEquations, Plots\nusing DifferentialEquations, Flux, DiffEqFlux, Optim, DiffEqSensitivity\nimport Statistics\nusing Turing, Distributions, DifferentialEquations \nusing MCMCChains, Plots, StatsPlots\nusing Random\nusing Logging","category":"page"},{"location":"03-simulations.html#Simulating-data","page":"Parameter estimation from simulated data","title":"Simulating data","text":"","category":"section"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"We use the same equations as before. This time we specify some times to sample the solution to obtain data to use in parameter estimation.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"function droop!(du, u, p, t)\n  R, Q, X = u\n  Km, Vmax, Qmin, muMax, d, R0 = p\n  rho = Vmax * R / (Km + R)\n  mu = muMax * (1 - Qmin/Q)\n  du[1] = dRdt = d*(R0 - R) - rho*X\n  du[2] = dQdt = rho - mu*Q\n  du[3] = dXdt = (mu - d)*X\nend\nnothing # hide","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"The initial conditions, parameters, and time-span for the solution must be specified.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"u0 = [1.0, 1.0, 1.0]\np = [0.1, 2.0, 1.0, 0.8, 0.0, 0.0]\ntspan = (0.0, 10.0)\ntsteps = [0.1, 3.2, 4.5, 7.0, 9.1]\nnothing # hide","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Now we create and solve the ODE initial value problem. We will create two solutions, one smoothly estimating the solution with interpolation on an interval and one with  samples at a few discrete points.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"prob = ODEProblem(droop!, u0, tspan, p)\nsol1 = solve(prob, Tsit5())\nsol2 = solve(prob, Rosenbrock23(), saveat = tsteps)\nnothing # hide","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"We will plot the solution and the discrete samples.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Plots.plot(sol1)\nPlots.scatter!(sol2)","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"We can convert the solution to a matrix and add some noise to the output.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"data1 = Array(sol2) \ndata1 = data1 .* (1 .+ 0.05*randn(size(data1)));\nPlots.plot(sol1, label = ['R' 'Q' 'X'])\nPlots.scatter!(sol2.t, data1', label = ['R' 'Q' 'X'])","category":"page"},{"location":"03-simulations.html#Optimization-to-find-parameters","page":"Parameter estimation from simulated data","title":"Optimization to find parameters","text":"","category":"section"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"First we write a function to describe the difference between a trial solution and the data points.  For the optimizer we use next, this should be a function of just the  parameters to be adjusted. Here my loss function is the difference between solution and data, scaled by standard deviation of each variable in data, squared and summed.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"function loss(p)\n    tspan = (0.0, 10.0)\n    u0 = p[1:3]\n    param = [ p[4:7] ; 0.0 ; 0.0 ] # force d = Rin = 0.0\n    prob = ODEProblem(droop!, u0, tspan, param)\n    sol2 = solve(prob, Rosenbrock23(), saveat = tsteps)\n    data2 = Array(sol2)\n    # loss = sum(((1.0 ./ Statistics.std(data1, dims=2)') * (data2 .- data1) ) .^ 2 )\n    # loss = sum(((1.0 ./ (1 .+ Statistics.std(data1, dims=2)')) * (data2 .- data1) ) .^ 2 )\n    loss = sum( (data2 .- data1) .^ 2 )\n  return loss , sol2\nend","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"(Note: I originally standardized the three variables as in the commented loss definition above, but  this resulted in a worse solution, because R was so close to 0 and has a standard deviation of 10^{-7}. Perhaps a solution is to add a small amount to standard deviations to prevent this distortion. My first  attempt, also commented out, did led to instabilities.)","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"The optimizer allows us to provide a callback function to show the loss score, or make a plot, at each iteration.  Here's an example callback function.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"callback = function (p, l, pred)\n  display(l)\n  # plt = plot(pred, ylim = (0, 6))\n  # display(plt)\n  # Tell sciml_train to not halt the optimization. If return true, then\n  # optimization stops.\n  return false\nend","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"We can test the loss function.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"loss([1.0; 1.0; 1.0; p])","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"We are now ready to use the optimizer. ADAM is the gradient-search method.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"result_ode = DiffEqFlux.sciml_train(loss, [1.0, 1.0, 1.0, 0.1, 2.0, 1.0, 1.0, 0, 0],\n                                    ADAM(0.001),  # this argument needs to be small or instability\n                                    cb = callback,\n                                    maxiters = 200)","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Now we use the parameters from this optimization to solve the differential equation and plot the solution.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"prob = ODEProblem(droop!, result_ode.u[1:3], tspan, result_ode.u[4:end])\nsol3 = solve(prob, Rosenbrock23())\nnothing # hide","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"We will plot the solution and the discrete samples.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Plots.plot(sol1, label = [\"Original R\" 'Q' 'X'])\nPlots.plot!(sol3, lw = 2, label = [\"New R\" 'Q' 'X'])\nPlots.scatter!(sol2.t, data1', label = [\"Data R\" 'Q' 'X'])","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Compare parameters.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"xaxis = [\"R0\" \"Q0\" \"X0\" \"Km\" \"Vmax\" \"Qmin\" \"muMax\" \"d\" \"R0\"]\nestimate = result_ode.u'\noriginal = [u0; p]'\nerror = (estimate .- original ) ./ original\np1 = Plots.scatter(xaxis, estimate, legend = false, title = \"Parameters\")\np1 = Plots.scatter!(xaxis, original, legend = false)\np2 = Plots.scatter(xaxis[1:7], error[1:7], legend = false, title = \"Relative error\")\nplot(p1, p2, layout = (2,1))","category":"page"},{"location":"03-simulations.html#Bayesian-MCMC-parameter-estimation","page":"Parameter estimation from simulated data","title":"Bayesian MCMC parameter estimation","text":"","category":"section"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Set a random seed to make the result reproducible. Select an option for Turing package.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Random.seed!(14)\nTuring.setadbackend(:forwarddiff)\nnothing # hide","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Define a model for the parameters, including priors, solution of the ODE, and comparison between data and the solution.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"@model function fitDroop1(t, R, Q, X)\n    σ1 ~ InverseGamma(2, 3)  # positive support; parameters α, β; mean β/(α-1), here 3\n    σ2 ~ InverseGamma(2, 3) \n    R0 ~ truncated(Normal(1, 1), 0, 5)\n    Q0 ~ truncated(Normal(1, 1), 0, 5)\n    X0 ~ truncated(Normal(1, 1), 0, 5)\n    Km ~ truncated(Normal(4.0, 2), 0, 5)\n    Vmax ~ truncated(Normal(1.2, 2), 0, 5)\n    Qmin ~ truncated(Normal(1.0, 2), 0, 5)\n    muMax ~ truncated(Normal(1.0, 2), 0, 5)\n\n    p = [ Km, Vmax, Qmin, muMax, 0.0, 0.0]\n\n    # must define the problem with numeric values first, then update with distributions\n    prob1 = ODEProblem(droop!, [R[1], Q[1], X[1]], (0.0, 10.0), [0.1, 1.0, 1.0, 1.0, 0.0, 0.0])\n    prob = remake(prob1, u0=[R0, Q0, X0], p=p)  \n    predicted = solve(prob, Rosenbrock23(), saveat=t)\n    \n    for j = 1:length(t)\n        Q[j] ~ Normal(predicted[j][2], σ1)\n        X[j] ~ Normal(predicted[j][3], σ2)\n    end\nend\nnothing # hide","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Create the model and simulate the chains.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"t = sol2.t\nR = [v[1] for v in sol2.u]\nQ = [v[2] for v in sol2.u]\nX = [v[3] for v in sol2.u]\n\nmodel = fitDroop1(t, R, Q, X)\nchain2 = sample(model, NUTS(.65), MCMCThreads(), 200, 4, progress=false)  # multi-threaded\n# chain2 = mapreduce(c -> sample(model, NUTS(.75), 200), chainscat, 1:4) # single thread\nnothing # hide","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"Extract data so we can plot trajectories from a selection of parameter values from the posterior distribution. Parameters come out of the chains in alphabetical order, so I resequence them to be in the order: initial conditons, parameter values as used in ODE function.","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"chain_array0 = Array(chain2);\nchain_array = chain_array0[: ,[4, 2, 6, 1, 5, 3, 7] ]  # R Q X Km Vmax Qmin muMax\nnothing # hide","category":"page"},{"location":"03-simulations.html","page":"Parameter estimation from simulated data","title":"Parameter estimation from simulated data","text":"N = size(chain_array)[1]\nN2 = Int(N/2)\npR = Plots.scatter(t, R);\nfor k in 1:300\n    pars = [ chain_array[rand(N2:N), :];  0.0; 0.0 ] # append d, Rin\n    resol = solve(remake(prob, u0 = pars[1:3], p = pars[4:end]), Rosenbrock23()) \n    pR = plot!(resol, vars=(0,1), alpha=0.3, color = \"#BBBBBB\", legend = false)\nend\npR = plot!(sol1, vars=(0,1), alpha=1, color = \"#BB0000\", legend = false, ylims=(0, Inf),\n        yguide = \"R\")\npQ = Plots.scatter(t, Q);\nfor k in 1:300\n    pars = [ chain_array[rand(N2:N), :];  0.0; 0.0 ] # append d, Rin\n    resol = solve(remake(prob, u0 = pars[1:3], p = pars[4:end]), Rosenbrock23()) \n    pQ = plot!(resol, vars=(0,2), alpha=0.3, color = \"#BBBBBB\", legend = false)\nend\npQ = plot!(sol1, vars=(0,2), alpha=1, color = \"#BB0000\", legend = false, ylims=(0, Inf),\n        yguide = \"Q\")\npX = Plots.scatter(t, log.(X));\nfor k in 1:300\n    pars = [ chain_array[rand(N2:N), :];  0.0; 0.0 ] # append d, Rin\n    resol = solve(remake(prob, u0 = pars[1:3], p = pars[4:end]), Rosenbrock23()) \n    pX = plot!(resol, vars=((t,x) -> (t, log.(x)), 0, 3), alpha=0.3, color = \"#BBBBBB\", legend = false)\nend\npX = plot!(sol1, vars=((t,x) -> (t, log.(x)), 0,3), alpha=1, color = \"#BB0000\", legend = false,\n        yguide = \"log X\")\nplot(pR, pQ, pX, layout = (3,1))","category":"page"},{"location":"02-eqns.html#Droop-Grover-growth","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"","category":"section"},{"location":"02-eqns.html#Pre-requisites","page":"Droop-Grover growth","title":"Pre-requisites","text":"","category":"section"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"Julia packages used:","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"using DifferentialEquations\nusing Plots","category":"page"},{"location":"02-eqns.html#Model-equations","page":"Droop-Grover growth","title":"Model equations","text":"","category":"section"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"We have three state variables","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"the nutrient (e.g., nitraite) concentration R, (mumol L^-1, pg m^-3)\nthe amount of nutrient within a cell Q, (pg cell^-1, pmol cell^-1)\nthe cell number density X, (cells L^-1)","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"The dynamical equations are ","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"beginaligned\n fracdRdt = d(R_in - R) - rho X \n fracdQdt = rho  - mu Q \n fracdXdt = X (mu - d)\nendaligned","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"where","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"uptake is  rho(Q) = V_maxfracRK_m+R\ngrowth rate is mu(Q) = mu_maxleft(1-fracQ_minQright) or mu(Q) = mu_maxleft(fracQ-Q_minQ_max-Q_minright)","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"and the parameters are","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"mu_max the maximum growth rate (d^-1), achieved at either Q= Q_max or as Qtoinfty\nQ_min and Q_max the minimum and maximum cell quota (pg cell^-1) the quota at which growth stops or reaches a maximum rate\nK_m (µmol L^-1) the half-saturation constant for nutrient uptake,\nV_max (µmol cell^-1 d^-1) the maximum uptake rate per cell\nd the dilution rate of the continuous culture\nR_in the nutrient concentration in the incoming media (which has no cells)","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"Naturally the initial conditions must also be specified.","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"The differential equations can be written as a function  in Julia using the DifferentialEquations package.","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"function droop!(du, u, p, t)\n  R, Q, X = u\n  Km, Vmax, Qmin, muMax, d, R0 = p\n  rho = Vmax * R / (Km + R)\n  mu = muMax * (1 - Qmin/Q)\n  du[1] = dRdt = d*(R0 - R) - rho*X\n  du[2] = dQdt = rho - mu*Q\n  du[3] = dXdt = (mu - d)*X\nend\nnothing # hide","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"The initial conditions, parameters, and time-span for the solution must be specified. The values used here are just convenient non-dimensionalized values. They should not be compared to real data. We will have real data soon.","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"u0 = [1.0, 1.0, 1.0]\np = [0.1, 2.0, 1.0, 0.8, 0.0, 0.0]\ntspan = (0.0, 10.0)\nnothing # hide","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"Now we create and solve the ODE initial value problem. We need to pick an integration method; here we use the Tsit5 algorithm; later we will use the implict-stiff solver Rosenbrock23.","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"prob = ODEProblem(droop!, u0, tspan, p)\nsol = solve(prob, Tsit5())\nnothing # hide","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"The Plots package makes it easy to plot solutions to the system.","category":"page"},{"location":"02-eqns.html","page":"Droop-Grover growth","title":"Droop-Grover growth","text":"Plots.plot(sol)","category":"page"}]
}
